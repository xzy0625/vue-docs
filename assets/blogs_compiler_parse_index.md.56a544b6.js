import{_ as s,o as n,c as a,U as l}from"./chunks/framework.df9742f3.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/compiler/parse/index.md","filePath":"blogs/compiler/parse/index.md","lastUpdated":1705234339000}'),p={name:"blogs/compiler/parse/index.md"},o=l(`<p>Vue3 为了运行时的性能优化，在编译阶段也是下了不少功夫，在接下来的系列文章中，我们一起去了解 Vue 3 编译过程以及背后的优化思想。由于编译过程平时开发中很难接触到，所以不需要你对每一个细节都了解，你只要对整体有一个理解和掌握即可。</p><h2 id="前置知识" tabindex="-1">前置知识 <a class="header-anchor" href="#前置知识" aria-label="Permalink to &quot;前置知识&quot;">​</a></h2><h2 id="mode" tabindex="-1">mode <a class="header-anchor" href="#mode" aria-label="Permalink to &quot;mode&quot;">​</a></h2><p>在进行 <code>parseChildren</code>解析时，会时常用到一个变量 <code>mode</code>。这个<code>mode</code>是什么了？</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">export const enum TextModes {</span></span>
<span class="line"><span style="color:#A6ACCD;">  //          | Elements | Entities | End sign              | Inside of</span></span>
<span class="line"><span style="color:#A6ACCD;">  DATA, //    | ✔        | ✔        | End tags of ancestors |</span></span>
<span class="line"><span style="color:#A6ACCD;">  RCDATA, //  | ✘        | ✔        | End tag of the parent | &lt;textarea&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  RAWTEXT, // | ✘        | ✘        | End tag of the parent | &lt;style&gt;,&lt;script&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  CDATA,</span></span>
<span class="line"><span style="color:#A6ACCD;">  ATTRIBUTE_VALUE</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>上面是<code>mode</code>的枚举。表示当前解析的模式，在不同模式下，解析可能会稍有不同，但是不会影响整体的流程，可以简单了解一下有那些 <code>mode</code>。</p><ul><li>DATA（mode = 0 ）：类型即为元素（包括组件）；</li><li>RCDATA（mode = 1 ）：是在<code>&lt;textarea&gt;</code>标签中的文本；</li><li>RAWTEXT（mode = 2 ）：类型为<code>script、noscript、iframe、style</code>中的代码；</li><li>CDATA（mode = 3 ）：前端比较少接触的<code>&#39;&lt;![CDATA[cdata]]&gt;&#39;</code>代码，这是使用于<code>XML与XHTML中的注释</code>，在该注释中的 cdata 代码将不会被解析器解析，而会当做普通文本处理;</li></ul><h2 id="ancestors" tabindex="-1">ancestors <a class="header-anchor" href="#ancestors" aria-label="Permalink to &quot;ancestors&quot;">​</a></h2><p><code>ancestors 是一个数组</code>，用于存储祖先节点数组。 例如我有一个这样的简单模板：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">1</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>那么<code>ancestors</code>变化如下</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">[div] </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> [div</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ul] </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> [div</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ul</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> li] </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> [div</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ul] </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> [div] </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> []</span></span></code></pre></div><p><strong>其实 HTML 的嵌套结构的解析过程，就是一个递归解析元素节点的过程，为了维护父子关系，当需要解析子节点时，我们就把当前节点入栈，子节点解析完毕后，我们就把当前节点出栈，因此 ancestors 的设计就是一个栈的数据结构，整个过程是一个不断入栈和出栈的过程。</strong></p><h2 id="node节点类型" tabindex="-1">node节点类型 <a class="header-anchor" href="#node节点类型" aria-label="Permalink to &quot;node节点类型&quot;">​</a></h2><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * VNODE_CALL：虚拟节点调用节点</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">JS_CALL_EXPRESSION：JS 调用表达式节点</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">JS_OBJECT_EXPRESSION：JS 对象表达式节点</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">JS_PROPERTY：JS 对象属性节点</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">JS_ARRAY_EXPRESSION：JS 数组表达式节点</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">JS_FUNCTION_EXPRESSION：JS 函数表达式节点</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">JS_CONDITIONAL_EXPRESSION：JS 条件表达式节点</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">JS_CACHE_EXPRESSION：JS 缓存表达式节点</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">NodeTypes</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 节点类型</span></span>
<span class="line"><span style="color:#A6ACCD;">  ROOT</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  ELEMENT</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  TEXT</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  COMMENT</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 注释</span></span>
<span class="line"><span style="color:#A6ACCD;">  SIMPLE_EXPRESSION</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 简单表达式节点</span></span>
<span class="line"><span style="color:#A6ACCD;">  INTERPOLATION</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 插值节点</span></span>
<span class="line"><span style="color:#A6ACCD;">  ATTRIBUTE</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 属性</span></span>
<span class="line"><span style="color:#A6ACCD;">  DIRECTIVE</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 指令</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// containers</span></span>
<span class="line"><span style="color:#A6ACCD;">  COMPOUND_EXPRESSION</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  IF</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// v-if 指令节点</span></span>
<span class="line"><span style="color:#A6ACCD;">  IF_BRANCH</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  FOR</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  TEXT_CALL</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 文本调用节点</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// codegenx相关</span></span>
<span class="line"><span style="color:#A6ACCD;">  VNODE_CALL</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  JS_CALL_EXPRESSION</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  JS_OBJECT_EXPRESSION</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  JS_PROPERTY</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  JS_ARRAY_EXPRESSION</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  JS_FUNCTION_EXPRESSION</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  JS_CONDITIONAL_EXPRESSION</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  JS_CACHE_EXPRESSION</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ssr codegen</span></span>
<span class="line"><span style="color:#A6ACCD;">  JS_BLOCK_STATEMENT</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  JS_TEMPLATE_LITERAL</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  JS_IF_STATEMENT</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  JS_ASSIGNMENT_EXPRESSION</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  JS_SEQUENCE_EXPRESSION</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  JS_RETURN_STATEMENT</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="报错" tabindex="-1">报错 <a class="header-anchor" href="#报错" aria-label="Permalink to &quot;报错&quot;">​</a></h2><p>在<code>parse</code>语法解析的过程中如果遇到了语法错误，会通过<code>emitError</code>这个函数来抛出错误信息，我们可以在整个流程中可以发现所有的错误都是他来处理的，通过传入不同的错误枚举来处理不同的错误</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">emitError</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">context</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ParserContext</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">code</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ErrorCodes</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 错误代码</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">offset</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">loc</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Position</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getCursor</span><span style="color:#A6ACCD;">(context)</span></span>
<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">offset</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">loc</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">offset</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">offset</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">loc</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">column</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">offset</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onError</span><span style="color:#F07178;">( </span><span style="color:#676E95;font-style:italic;">// 处理报错信息</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">createCompilerError</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">code</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      start</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">loc</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      end</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">loc</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      source</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  )</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div>`,18),e=[o];function t(c,r,y,D,i,A){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{F as __pageData,d as default};
