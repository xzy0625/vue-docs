import{_ as e,o,c as a,U as l}from"./chunks/framework.df9742f3.js";const k=JSON.parse('{"title":"Set和WeakSet","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/pre-knowledge/set.md","filePath":"blogs/pre-knowledge/set.md","lastUpdated":1702369352000}'),t={name:"blogs/pre-knowledge/set.md"},s=l(`<h1 id="set和weakset" tabindex="-1">Set和WeakSet <a class="header-anchor" href="#set和weakset" aria-label="Permalink to &quot;Set和WeakSet&quot;">​</a></h1><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p><code>Set</code>是一种叫集合的数据结构。 <code>Set</code> 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用，<code>Set</code>对象是值的集合，你可以按照插入的顺序迭代它的元素。 <code>Set</code>中的元素只会出现一次，即 <code>Set</code> 中的元素是唯一的。</p><h2 id="set的特点" tabindex="-1">Set的特点 <a class="header-anchor" href="#set的特点" aria-label="Permalink to &quot;Set的特点&quot;">​</a></h2><ol><li><code>Set</code> 默认情况下不包含任何键，所有键都是自己添加进去的。</li><li><code>Set</code> 的键可以是<strong>任意类型</strong>数据</li><li><code>Set</code>存储的值是唯一不重复的。</li></ol><h2 id="基本用法" tabindex="-1">基本用法 <a class="header-anchor" href="#基本用法" aria-label="Permalink to &quot;基本用法&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> set </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Set</span><span style="color:#A6ACCD;">([</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 实例化一个Set</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(set) </span><span style="color:#676E95;font-style:italic;">// {1, 2} // 重复的1被过滤掉了</span></span></code></pre></div><h2 id="常见属性和方法" tabindex="-1">常见属性和方法 <a class="header-anchor" href="#常见属性和方法" aria-label="Permalink to &quot;常见属性和方法&quot;">​</a></h2><ul><li>size: 返回<code>Set</code>集合中包含的元素总数</li><li>add(value): 向<code>Set</code>中添加一个新的值</li><li>has(value): 判断某个值是否在 <code>Set</code> 集合中，在返回 true 否则返回 false</li><li>clear(): 清空<code>Set</code>，删除所有元素</li></ul><p>遍历<code>Set</code>的方法</p><ul><li>keys()：返回<code>Set</code>的所有键名，是一个迭代器</li><li>values()：返回<code>Set</code>的所有的键值，是一个迭代器</li><li>entries()：返回所有成员的键值对，是一个迭代器</li><li>forEach()：遍历<code>Set</code>的所有成员</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>由于set只有键值，没有键名，所以<code>keys() values()</code>行为完全一致。<code>entries()</code>返回的键值对也是相同的</p></div><h2 id="weakset" tabindex="-1">WeakSet <a class="header-anchor" href="#weakset" aria-label="Permalink to &quot;WeakSet&quot;">​</a></h2><blockquote><p>定义：<code>WeakSet</code> 的出现主要解决弱引用对象存储的场景, 其结构与<code>Set</code>类似</p></blockquote><p>与<code>Set</code>的区别</p><ul><li><code>Set </code>的键可以是任意类型，<code>WeakSet </code>的键只能是对象类型(null除外)</li><li><code>WeakSet </code>键名所指向的对象是弱引用，不计入垃圾回收机制</li><li><code>WeakSet</code> 的属性跟操作方法与 <code>Set</code> 一致，不同的是 <code>WeakSet</code> 没有遍历方法，因为其成员都是弱引用，弱引用随时都会消失，遍历机制无法保证成员的存在</li></ul><p>弱引用的概念在<code>WeakMap</code>中已经讲解，<code>WeakSet</code>的行为和<code>WeakMap</code>完全一致。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li>弱引用可以方便<code>js</code>执行垃圾回收机制，防止开发者忘记手动解除依赖造成内存泄漏</li><li><code>Set、WeakSet</code>、都是一种集合的数据结构</li><li><code>Set </code>的值可以是任意类型，<code>WeakSet </code>的值只能是除了<code>null</code>以外的对象类型</li><li><code>Set</code> 有遍历方法，<code> WeakSet</code> 属于弱引用不可遍历</li></ul>`,19),c=[s];function d(n,i,p,r,S,h){return o(),a("div",null,c)}const C=e(t,[["render",d]]);export{k as __pageData,C as default};
