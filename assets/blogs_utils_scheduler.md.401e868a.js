import{_ as s,o as n,c as a,U as l}from"./chunks/framework.df9742f3.js";const A=JSON.parse('{"title":"调度器scheduler","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/utils/scheduler.md","filePath":"blogs/utils/scheduler.md","lastUpdated":1705052679000}'),p={name:"blogs/utils/scheduler.md"},o=l(`<h1 id="调度器scheduler" tabindex="-1">调度器scheduler <a class="header-anchor" href="#调度器scheduler" aria-label="Permalink to &quot;调度器scheduler&quot;">​</a></h1><p>可调度性是响应式系统中非常重要的特性，调度器的存在可以帮助我们控制副作用函数的执行时机、次数和方式而不会产生魂混乱</p><p>我们使用<code>vue</code>的时候经常遇到的一个问题就是为什么我们更新响应式数据后立马从页面获取数据为什么获取到的不是最新值。这其实就和我们页面渲染副作用的执行相关，我们的页面渲染是异步执行的，所以同步的代码执行的是我们异步代码(也就是<code>render</code>函数)还没执行。将渲染函数设置为异步执行好处还是很多的，例如最基本的我们改变了某个数据很多次，我们不需要每一次都去执行一次<code>render</code>只需要执行最后一次就好了。</p><p>在<code>vue</code>中，以下任务都需要经过调度器的调度</p><ul><li>watch的<code>callback</code>函数，需要在组件更新前调用 <ul><li><code>watch</code>在一般情况下，是加入到<code>Pre</code>队列(<code>DOM更新前队列</code>)等待执行，但在组件更新时，<code>watch</code>也是加入队列，但会立即执行并清空<code>Pre</code>队列</li></ul></li><li>组件<code>DOM</code>的更新，需要在响应式数据(<code>Ref、reactive、data</code>等)变化之后更新</li><li>父组件需要先更新，子组件后更新</li><li><code>mounted</code>生命周期，需要在组件挂载之后执行</li><li><code>updated</code>生命周期，需要在组件更新之后执行</li></ul><p>这些我们可以先有个大概了解，知道和调度器有关，我们会在之后详细讲解。</p><h2 id="js执行机制" tabindex="-1">JS执行机制 <a class="header-anchor" href="#js执行机制" aria-label="Permalink to &quot;JS执行机制&quot;">​</a></h2><p>我们都知道 <code>JS</code> 是单线程语言，即指某一时间内只能干一件事，为什么 <code>JS</code> 不能是多线程呢？这取决于 <code>JS</code>的语言特性，我们 <code>JS</code>的定位是脚本语言，想象一下，如果同一时间，一个添加了 <code>DOM</code>，一个删除了 <code>DOM</code>，那么我们浏览器以哪个为准呢。所以 为了避免这类情况， <code>JS</code>被设计成单线程的，之后大概率也不会变。</p><p>单线程就意味着同一时间我们只能执行一个任务，所有的任务都需要按顺序执行。那么我们遇到一些耗时较长的任务(例如网络请求)，那么其他的任务就需要一直等待，这对于用户的体验显然非常不好，所以<code>JS</code>引入了异步的概念。</p><p>我们的任务分成同步任务和异步任务。同步任务会在 <code>JS</code>主线程上执行，异步任务会单独放在一个任务队列里面，当同步任务执行完毕并且异步任务有返回结果我们就执行异步任务。</p><ul><li>同步: 在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务</li><li>异步: 不进入主线程、而进入&quot;任务队列&quot;（task queue）的任务，只有&quot;任务队列&quot;通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行</li></ul><p>异步任务又会有宏任务和微任务。这里不做展开，相信大家都已经掌握了。由于我们的调度器就和<code>JS</code>执行机制有关系，所以在这里提一嘴。</p><h2 id="调度队列" tabindex="-1">调度队列 <a class="header-anchor" href="#调度队列" aria-label="Permalink to &quot;调度队列&quot;">​</a></h2><p><code>vue</code>中一共有三种任务队列，前置任务，普通任务，后置任务。前置任务和普通任务共用一个队列，通过<code>pre</code>来区分，后置任务单独一个队列。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 装载前置任务和普通任务的队列。</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> queue</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SchedulerJob</span><span style="color:#A6ACCD;">[] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> []</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> activePostFlushCbs</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SchedulerJob</span><span style="color:#A6ACCD;">[] </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 是否正在运行后置任务</span></span></code></pre></div><p>他们的类型都是<code>SchedulerJob</code>，表示每一个作业/任务。我们调度器的作用就是调度这个任务按照合理的逻辑执行不会出现问题。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SchedulerJob</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//用于设置当前任务的优先级。越小的值优先级越高。</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">pre</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//用于判断是否是前置任务。</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">active</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//当前任务是否可以执行。为false在执行阶段跳过执行。</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">computed</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 是不是computed</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   * 这里的递归是指:当前正在执行的任务和需要添加的任务是同一个任务,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   * 如果设置了需要递归(job.allowRecurse=true)那么就允许这个任务进入queue队列中,否则不允许进入。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   * 如果是递归的话，开发者需要保证不能出现死循环</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">allowRecurse</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//是否允许递归。</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">ownerInstance</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentInternalInstance</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>任务的定义如上，他是一个函数，上面会挂载一些属性，我们重点关注<code>id</code>和<code>pre</code>这两个属性。</p><h2 id="入队操作" tabindex="-1">入队操作 <a class="header-anchor" href="#入队操作" aria-label="Permalink to &quot;入队操作&quot;">​</a></h2><p>我们的每个任务队列都会有对应的入队操作，向任务队列中添加新的任务。</p><h3 id="前置任务-普通任务入队" tabindex="-1">前置任务/普通任务入队 <a class="header-anchor" href="#前置任务-普通任务入队" aria-label="Permalink to &quot;前置任务/普通任务入队&quot;">​</a></h3><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">queueJob</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">job</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SchedulerJob</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 没有任务或者当前任务不存在在当前任务队列里面(allowRecurse情况单独考虑)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">queue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">queue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">includes</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">job</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">isFlushing</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">job</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">allowRecurse</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">flushIndex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">flushIndex</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 判断这个job是不是已经存在在queue中，如果允许递归，我们不考虑当前的运行job（因为新的job可能是我们正在运行的job产生的，我们允许递归的话就不考虑正在运行的这个）</span></span>
<span class="line"><span style="color:#F07178;">    )</span></span>
<span class="line"><span style="color:#F07178;">  ) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 任务没有id优先级就放在队列最后面</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">job</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">queue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">job</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 有的话就通过二分查找找到合适的位置插入</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">queue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">splice</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">findInsertionIndex</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">job</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">job</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 执行任务</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">queueFlush</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span></code></pre></div><p><code>queueJob</code>主要是根据任务的id(优先级)，利用二分法找到需要插入的位置，插入到queue队列当中。最后调用<code>queueFlush</code>执行所有任务。<code>queueFlush</code>函数我们之后再看。</p><h3 id="后置任务入队" tabindex="-1">后置任务入队 <a class="header-anchor" href="#后置任务入队" aria-label="Permalink to &quot;后置任务入队&quot;">​</a></h3><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">queuePostFlushCb</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">cb</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SchedulerJobs</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#82AAFF;">isArray</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">cb</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">activePostFlushCbs</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">activePostFlushCbs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">includes</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">cb</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">cb</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">allowRecurse</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">postFlushIndex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">postFlushIndex</span></span>
<span class="line"><span style="color:#F07178;">      )</span></span>
<span class="line"><span style="color:#F07178;">    ) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">pendingPostFlushCbs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">cb</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//如果cb是一个数组，那么它就是一个组件生命周期挂钩，只能</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//由作业触发，该作业已在主队列中进行了重复数据消除，因此</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//我们可以跳过这里的重复检查来提高性能</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">pendingPostFlushCbs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">cb</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">queueFlush</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>后置任务的操作和之前任务一样，入队任务并调用<code>queueFlush</code>执行。</p><h2 id="执行任务" tabindex="-1">执行任务 <a class="header-anchor" href="#执行任务" aria-label="Permalink to &quot;执行任务&quot;">​</a></h2><p>我们入队之后都会调用<code>queueFlush</code>进行任务的执行，接下来就看具体是如何实现的。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> isFlushing </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 判断当前是否正在执行任务。</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> isFlushPending </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 判断任务是不是在等待阶段，任务的执行是一个微任务,它将会被放到微任务队列,那么对于渲染主线程来说,当前还没有执行这个微任务,在执行这个微任务之前都属于等待阶段。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">queueFlush</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 这个执行的是一个微任务</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//当前没有执行任务且没有任务可执行</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">isFlushing</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">isFlushPending</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 等待任务执行</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">isFlushPending</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 将flushJobs放入微任务队列。不会影响现在同步任务的执行</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">currentFlushPromise</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">resolvedPromise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">flushJobs</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// resolvedPromise就是Promise.resolve()</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>可以看到当我们没有等待任务和正在执行的任务的时候，我们就将状态扭转为等待状态，并将最终任务执行函数<code>flushJobs</code>放入微任务队列中。这里等待的意思是：我们需要等同步任务执行完之后才能执行<code>flushJobs</code>。</p><h3 id="flushjobs" tabindex="-1">flushJobs <a class="header-anchor" href="#flushjobs" aria-label="Permalink to &quot;flushJobs&quot;">​</a></h3><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">flushJobs</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">seen</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CountMap</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">isFlushPending</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// isFlushPending置为false</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">isFlushing</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 设置为运行状态</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">__DEV__</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">seen</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">seen</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Map</span><span style="color:#F07178;">() </span><span style="color:#676E95;font-style:italic;">// 这是一个Map,用于缓存job的执行次数</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//在flush之前对queue排序这样做是为了:</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//1.组件更新是从父组件到子组件(因为父组件总是在子组件之前创建，所以父组件的render副作用将会有更低的优先级）</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//2.如果子组件在父组件更新期间并未挂载,那么可以跳过</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">queue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sort</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">comparator</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// comparator逻辑：按照id从小到大执行，id相同就前置任务pre先执行</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//监测当前任务是否已经超过了最大递归层数</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">check</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">__DEV__</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">job</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">SchedulerJob</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">checkRecursiveUpdates</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">seen</span><span style="color:#89DDFF;">!,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">job</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NOOP</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 先执行前置任务和普通任务</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">flushIndex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">flushIndex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">queue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">flushIndex</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">job</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">queue</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">flushIndex</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">job</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">job</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">active</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">callWithErrorHandling</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">job</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ErrorCodes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">SCHEDULER</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">finally</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 执行完所有的任务之后,初始化queue</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 调用post任务,这些任务调用完成后</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 可能在执行这些任务的途中还有新的任务加入所以需要继续执行flushJobs</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">flushIndex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">queue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 再执行后置任务</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">flushPostFlushCbs</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">seen</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">isFlushing</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">currentFlushPromise</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 重置当前的flushPromise</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// some postFlushCb queued jobs!</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// keep flushing until it drains.</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">queue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pendingPostFlushCbs</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">flushJobs</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">seen</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 重新执行一次保证没有落掉任务，因为运行postFlushQueue之后可能有新的queue</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><code>flushJobs</code>就是我们最终的任务执行函数了。可以看到我们的执行是先执行<code>queue</code>也就是前置/普通任务。然后调用<code>flushPostFlushCbs</code>执行后置任务。等所有任务执行完之后我们会再调用一次<code>flushJobs</code>因为在新的任务执行的阶段可能会产生新的任务，所以要确保执行干净。</p><h3 id="flushpostflushcbs" tabindex="-1">flushPostFlushCbs <a class="header-anchor" href="#flushpostflushcbs" aria-label="Permalink to &quot;flushPostFlushCbs&quot;">​</a></h3><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">flushPostFlushCbs</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">seen</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CountMap</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">pendingPostFlushCbs</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//克隆等待执行的pendingPost并去重</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">deduped</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">...new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Set</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">pendingPostFlushCbs</span><span style="color:#F07178;">)]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">pendingPostFlushCbs</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 当前正在执行后置任务就将任务放在后置任务末尾</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">activePostFlushCbs</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">activePostFlushCbs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">deduped</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">activePostFlushCbs</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">deduped</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">activePostFlushCbs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sort</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">getId</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">getId</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">b</span><span style="color:#F07178;">)) </span><span style="color:#676E95;font-style:italic;">// 通过id排序</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">postFlushIndex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">postFlushIndex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">activePostFlushCbs</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">postFlushIndex</span><span style="color:#89DDFF;">++</span></span>
<span class="line"><span style="color:#F07178;">    ) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">activePostFlushCbs</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">postFlushIndex</span><span style="color:#F07178;">]() </span><span style="color:#676E95;font-style:italic;">// 执行</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">activePostFlushCbs</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">postFlushIndex</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><code>flushPostFlushCbs</code>执行后置任务的逻辑也比较清晰。也是排序之后一个个执行。</p><p>但是值得注意的是，代码中有一个<code>activePostFlushCbs</code>不为空就<code>return</code>的逻辑。这里主要是为了保证任务的顺序执行，不至于混乱。想象一下如果是直接通过<code>flushPostFlushCbs</code>发起的调用后置任务，那么flushPostFlushCbs里面的代码都是同步的。如果这个时候有正在执行通过<code>flushJobs</code>发起的<code>flushPostFlushCbs</code>调用（是异步的）。那么就会造成直接调用的比我们<code>flushJobs</code>调用的先执行了，可能会出现问题。所以会放置到最后然后返回，等待正常执行。</p><h3 id="flushpreflushcbs" tabindex="-1">flushPreFlushCbs <a class="header-anchor" href="#flushpreflushcbs" aria-label="Permalink to &quot;flushPreFlushCbs&quot;">​</a></h3><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">flushPreFlushCbs</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">seen</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CountMap</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">i</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> isFlushing </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> flushIndex </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 如果当前有正在执行的任务，需要跳过</span></span>
<span class="line"><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">queue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">cb</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">queue</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">cb</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">cb</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pre</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 执行前置任务</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">queue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">splice</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 去掉当前任务</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">--</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">cb</span><span style="color:#F07178;">() </span><span style="color:#676E95;font-style:italic;">// 前置任务是同步执行的</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>对于前置任务，我们会有一个单独的函数<code>flushPreFlushCbs</code>来执行，可以看到调用<code>flushPreFlushCbs</code>是同步执行的，不论何时调用<code>flushPreFlushCbs</code>，我们都会立马执行完所有的前置任务。这一点和<code>flushPostFlushCbs</code>不同。</p><h2 id="小测试" tabindex="-1">小测试 <a class="header-anchor" href="#小测试" aria-label="Permalink to &quot;小测试&quot;">​</a></h2><p>上述就是<code>vue</code>调度器的所有内容了，为了加深大家的理解，我们有下面这个小例子，大家可以看下自己掌握的如何。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pre1</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">flushPreFlushCbs</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pre1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">pre1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">pre1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pre </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pre2</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pre2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">pre2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">9999</span></span>
<span class="line"><span style="color:#A6ACCD;">pre2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pre </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">normal</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">normal</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">normal</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">post1</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">queuePostFlushCb</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">post2</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">flushPostFlushCbs</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">post1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">post2</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">post2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">queueJob</span><span style="color:#A6ACCD;">(pre1)</span></span>
<span class="line"><span style="color:#82AAFF;">queueJob</span><span style="color:#A6ACCD;">(pre2)</span></span>
<span class="line"><span style="color:#82AAFF;">queueJob</span><span style="color:#A6ACCD;">(normal)</span></span>
<span class="line"><span style="color:#82AAFF;">queuePostFlushCb</span><span style="color:#A6ACCD;">(post1)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 最后输出什么</span></span></code></pre></div><p>上面这个例子把和调度相关的内容都结合起来了。掌握了这个肯定就对<code>vue</code>调度器了如指掌了</p><h3 id="分析" tabindex="-1">分析 <a class="header-anchor" href="#分析" aria-label="Permalink to &quot;分析&quot;">​</a></h3><ol><li><code>queueJob(pre1)</code>将<code>pre1</code>入队，并调用<code>queueFlush</code>产生一个微任务，微任务为<code>flushJobs</code></li><li>继续入队，最后按照优先级排序为<code>[pre1, normal, pre2, post1]</code></li><li>执行<code>flushJobs</code>，<code>flushJobs</code>执行<code>pre1</code></li><li><code>pre1</code>执行<code>flushPreFlushCbs</code>，由于<code>flushPreFlushCbs</code>是同步的，所以继续执行<code>pre2</code>。打印<code>pre2</code>，并删除<code>pre2</code></li><li><code>pre1</code>继续执行打印<code>pre1</code>。执行<code>normal</code>，打印<code>normal</code></li><li><code>flushJobs</code>调用<code>flushPostFlushCbs</code>执行后置任务，先执行<code>post1</code>，<code>post1</code>又执行了<code>flushPreFlushCbs。会将</code>post2\`入队，由于现在有任务正在执行，所以放到任务队列末尾。</li><li>打印<code>post1</code>，打印<code>post2</code></li></ol><p>最后结果为依次打印：<code>pre2 pre1 normal post1 post2</code></p><h2 id="推荐阅读" tabindex="-1">推荐阅读 <a class="header-anchor" href="#推荐阅读" aria-label="Permalink to &quot;推荐阅读&quot;">​</a></h2><p>有了上述基础，建议大家继续阅读以下章节，它们都和调度有关</p><ol><li><a href="/vue-docs/blogs/apis/watch.html">watch实现原理</a></li><li><a href="/vue-docs/blogs/apis/forceUpdate.html">forceUpdate实现原理</a></li><li><a href="/vue-docs/blogs/apis/nextTick.html">nextTick实现原理</a></li></ol>`,50),e=[o];function c(t,r,y,F,D,i){return n(),a("div",null,e)}const u=s(p,[["render",c]]);export{A as __pageData,u as default};
